version: "3.5"
services:
  # FIWARE

  # Orion is the context broker
  orion:
    image: fiware/orion:2.4.0
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - "1026:1026"
    command: -dbhost mongo-db -logLevel DEBUG -corsOrigin __ALL -corsMaxAge 600
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1

  # IoT-Agent is configured for the Json Protocol
  iot-agent:
    image: fiware/iotagent-json:1.15.0
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
    networks:
      - default
    environment:
      - IOTA_CB_HOST=orion
      - IOTA_CB_PORT=1026
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb
      - IOTA_LOG_LEVEL=DEBUG
      - IOTA_TIMESTAMP=true
      - IOTA_CB_NGSI_VERSION=v2
      - IOTA_AUTOCAST=true
      - IOTA_MONGO_HOST=mongo-db
      - IOTA_MONGO_PORT=27017
      - IOTA_MONGO_DB=iotagentjson
      - IOTA_HTTP_PORT=7896
      - IOTA_PROVIDER_URL=http://iot-agent:4041
      - IOTA_DEFAULT_RESOURCE=/iot/json


  # GIS server
  gis-server:
    image: gastonabella/gis-server:latest
    hostname: pygeoapi
    ports:
      - "5000:5000"

  sensor-platform-backend:
    image: gastonabella/sensor-platform-backend:latest
    command: bash -c "rm -f tmp/pids/server.pid && /usr/local/bin/init.sh"
    ports:
      - "7000:7000"
    depends_on:
      - postgres
    links:
      - postgres
    environment:
      - RAILS_ENV=development
      - DATABASE_NAME=sensorsbackenddb
      - DATABASE_USER=docker
      - DATABASE_PASSWORD=docker
      - DATABASE_PORT=5432
      - DATABASE_HOST=postgres
      - SRID=4326
      - ORION_API_KEY=4jggokgpepnvsb2uv4s40d59ov
      - CONTEXT_BROKER_URL=http://orion:1026
      - IOT_AGENT_SOUTH_URL=http://iot-agent:4041
      - IOT_AGENT_NORTH_URL=http://iot-agent:7896

  sensor-platform-frontend:
    image: gastonabella/sensor-platform-frontend:latest
    ports:
      - "7070:7070"

  smart-apps:
    image: gastonabella/smart-apps:latest
    stdin_open: true
    ports:
      - "3001:3001"

  # Databases

  postgres:
    image: kartoza/postgis:12.0
    build:
      context: ${PWD}
    volumes:
      - $PWD/../data/smartcitiesdb.sql:/docker-entrypoint-initdb.d/setup-db.sql
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=gis
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - PGPASSWORD=docker
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    restart: on-failure
    healthcheck:
      test: "exit 0"

  mongo-db:
    image: mongo:3.6
    hostname: mongo-db
    container_name: db-mongo
    networks:
      - default
    command: --bind_ip_all --smallfiles
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1

networks:
  default:
    ipam:
      config:
        - subnet: 172.20.1.0/24

volumes:
  tcpdump: ~
  mongo-db: ~
  postgres: ~
